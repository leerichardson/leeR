CRAN and R-Packages
========================================================
author: Lee F Richardson
date: Jan 30, 2018

1. What is CRAN? Why use it?
2. R CMD check
3. Travis, Win-builder, and Submitting

All code online at: https://github.com/leerichardson/leeR

What is CRAN?
========================================================
&nbsp;

"The Comprehensive R Archive Network (CRAN) is a collection of sites which carry identical material, consisting of the R distribution(s), the **contributed extensions**, documentation for R, and binaries."
<br><br>
- CRAN servers all over the world, called *mirrors*
<br><br>
- CRAN mirrors have **contributed extensions** (R-packages)

Why put your package on CRAN?
========================================================
<br><br>
- Authenticity
<br><br>

- Quality Control (external standards/checks)
<br><br>

- More likely to be used (`install.packages`)
<br><br>

CRAN vs. Github
========================================================
&nbsp;
- CRAN and Github:  Platforms for sharing R packages
<br><br>

- CRAN more reliable, takes more effort
<br><br>

- Github easy, no external checks
<br><br>

- Choice depends on project
<br><br>

It all comes down to R CMD check
========================================================
&nbsp;
`R CMD check`: Terminal command, checks package
&nbsp;

- Runs a series of checks on package

- Run in console with the `devtools` package:
&nbsp;

```{r, eval=FALSE}
  devtools::check()
```
&nbsp;

`devtools::check()` also:
- Runs documentation, builds package (`R CMD build`)

Three Types: Notes, Warnings, and Errors
========================================================
<br><br>
`R CMD check` gives three types of feedback:
- **Errors**:  Most Severe
<br><br>
- **Warnings**: Medium Severe
<br><br>
- **Notes**: Least Severe
<br><br>

Details on each check: 1.3.1 Writing R Extensions

Example 1: Checking the Tests
========================================================
<br><br>
  Say we add a new test to our package:
<br><br>

```{r, eval=FALSE}
test_that("our function works", {
  expect_equal(2, 2)
  expect_equal(1, 2)
})
```

<br><br>
What will `devtools::check()` do?

Error: Tests don't run!
========================================================

<div align="center">
  <img src="images/error-cran.png" width=800 height=600>
</div>

Example 2: Checking documentation
========================================================
```{r, eval=FALSE}
#' Print a string!
#'
#' @param string to print
#' @param fake parameter
#'
#' @return A printed string
#' @examples
#' to_print <- "Hello, world!
#' leeR_demo(to_print)
#'
leeR_demo <- function(string) {
  print(string)
}
```

`devtools::check()`?

Warning: Function/Docs don't match
========================================================

<div align="center">
  <img src="images/warning-cran.png" width=800 height=600>
</div>

Example 3: Anything wrong here?
========================================================
```{r}
#' Multivariate normal random numbers
#'
#' @param n number of observations
#' @param mean_vec vector of means
#'
#' @return n x length(mean_vec) of
#' observations from a multivariate normal
generate_mvnorm <- function(n, mean_vec) {
  rmvnorm(n = n, x = mean_vec)
}
```

<br><br>
`devtools::check()`...

Note: Using an external package
========================================================
<div align="center">
  <img src="images/note-cran.png" width=600 height=400>
</div>

```{r, eval=FALSE}
  devtools::use_package("mvtnorm")
  mvtnorm::rmvnorm
```


After R CMD check passes, we need to...
========================================================
&nbsp;
- Remember to keep running R CMD check
<br><br>

- Make sure R CMD check passes on multiple operating systems
<br><br>
<br><br>

Solve with Continuous Integration and Win-builder!

Continuous Integration automates checks
========================================================
What is Continuous Integration (CI)?

"Continuous Integration is the practice of merging in small code changes frequently - rather than merging in a large change at the end of a development cycle. The goal is to build healthier software by developing and testing in smaller increments. This is where Travis CI comes in." - https://docs.travis-ci.com/user/for-beginners
<br><br>
- Travis is a "Continuous Integration" (CI) service

- Use Travis `R CMD check` on every Github push

How to integrate Travis with R-package
========================================================
&nbsp;
- Add to package with:

```{r,eval=FALSE}
  devtools::use_travis("/home/lee/Dropbox/leeR")
```

- Creates `.travis.yml` in source directory

- Get Travis account, link Github account

- Push to Github

- E-mail will tell you if it passed

Travis builds and checks on Ubuntu
========================================================

<div align="center">
  <img src="images/travis-output.png" width=1000 height=600>
</div>

Win-builder builds and checks on Windows
========================================================
&nbsp;
- Travis checks package on **Ubuntu**
<br><br>

- Win-builder checks package on **Windows**
```{r,eval=FALSE}
  devtools::build_win()
```
- Build, submits to https://win-builder.r-project.org/
<br><br>

- E-mail in 30-60 minutes with results
&nbsp;

Win-builder builds and checks on Windows
========================================================

<div align="center">
  <img src="images/winbuilder.png" width=800 height=500>
</div>

Submitting the finished package
========================================================
1. `R CMD check` passes
2. Travis CI passes
3. Win-builder passes

Once these steps are complete:
- Follow http://r-pkgs.had.co.nz/release.html#release-check
- Aim, aim, Let it fly!

```{r, eval=FALSE}
  devtools::release()
```

Submits this form https://cran.r-project.org/submit.html

Conclusions
========================================================
&nbsp;

- It all comes down to **R CMD check**
<br><br>

- Know goals, prepare early for CRAN
<br><br>

- Travis, winbuilder are useful external tools
<br><br>

- Big victory for the devtools/R-packages book

Resources
========================================================
- http://r-pkgs.had.co.nz/check.html
- https://cran.r-project.org/doc/manuals/r-release/R-exts.html#useDynLib
- http://www.hep.by/gnu/r-patched/r-faq/R-FAQ_20.html
- https://cran.r-project.org/web/packages/policies.html

Two good lists of all the checks are
- http://r-pkgs.had.co.nz/check.html
- Section 1.3.1 of Writing R Extensions
