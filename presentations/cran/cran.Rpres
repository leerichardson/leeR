CRAN and R-Packages
========================================================
author: Lee F Richardson
date: Jan 30, 2018

1. What is CRAN? Why use it?
2. R CMD check
3. Travis, Winbuilder, and Submitting

All code online at: https://github.com/leerichardson/leeR

What is CRAN?
========================================================
&nbsp;

"The Comprehensive R Archive Network (CRAN) is a collection of sites which carry identical material, consisting of the R distribution(s), the **contributed extensions**, documentation for R, and binaries."
<br><br>
- CRAN servers all over the world, called *mirrors*
<br><br>
- CRAN servers include **contributed extensions**, (R-packages)

Why put your package on CRAN?
========================================================
<br><br>
- Authenticity
<br><br>

- Quality Control (external standards/checks)
<br><br>

- Higher usage (most people use `install.packages`)
<br><br>

CRAN vs. Github
========================================================
<br><br>

- CRAN, Github are platforms for sharing R packages
<br><br>

- CRAN more reliable, takes more effort
<br><br>

- Github easy, no external checks
<br><br>

- Choice depends on Project
<br><br>

It all comes down to R CMD check
========================================================

`R CMD check` is a terminal command that runs checks

- Easy to run with the `devtools` package:

```{r, eval=FALSE}
  devtools::check()
```

In addition to `R CMD check`,  devtools:

- Automatically runs documentation,

- Builds package (`R CMD build`) first

Three Types: Notes, Warnings, and Errors
========================================================
`R CMD check` gives three types of feedback:
- **Errors**:  Most Severe
<br><br>
- **Warnings**: Medium Severe
<br><br>
- **Notes**: Least Severe
<br><br>

Details on individual checks:

1. Section 1.3.1 of Writing R Extensions

2. *Checking* Chapter of R-packages book

Will check catch anything here?
========================================================
<br><br>
  Say we changed our tests:
<br><br>

```{r, eval=FALSE}
test_that("our function works", {
  expect_equal(2, 2)
  expect_equal(1, 2)
})
```

<br><br>
`devtools::check()`...

The tests don't pass!
========================================================

<div align="center">
  <img src="images/error-cran.png" width=800 height=600>
</div>

What happens here?
========================================================
```{r, eval=FALSE}
#' Print a string!
#'
#' @param string to print
#' @param fake parameter
#'
#' @return A printed string
#' @examples
#' to_print <- "Hello, world!
#' leeR_demo(to_print)
#'
leeR_demo <- function(string) {
  print(string)
}
```

`devtools::check()`...

Warning: Function doesn't match Docs
========================================================

<div align="center">
  <img src="images/warning-cran.png" width=800 height=600>
</div>

Anything wrong here?
========================================================
```{r}
#' Multivariate normal random numbers
#'
#' @param n number of observations
#' @param mean_vec vector of means
#'
#' @return n x length(mean_vec) of
#' observations from a multivariate normal
generate_mvnorm <- function(n, mean_vec) {
  rmvnorm(n = n, x = mean_vec)
}
```

<br><br>
`devtools::check()`...

Note: Interfacing with other functions
========================================================
<div align="center">
  <img src="images/note-cran.png" width=600 height=400>
</div>


```{r, eval=FALSE}
  devtools::use_package("mvtnorm")
  mvtnorm::rmvnorm
```

Continuous Integration automates checks
========================================================
What is Continuous Integration (CI)?

"Continuous Integration is the practice of merging in small code changes frequently - rather than merging in a large change at the end of a development cycle. The goal is to build healthier software by developing and testing in smaller increments. This is where Travis CI comes in." - https://docs.travis-ci.com/user/for-beginners
<br><br>
- Travis is a "Continuous Integration" service

- Use Travis to run `R CMD check` on every Github push

How to use Travis CI
========================================================

- Add to package with:

```{r,eval=FALSE}
  devtools::use_travis("/home/lee/Dropbox/leeR")
```

- Get Travis account, link Github account

- Push to Github

- E-mail will tell you if it passed

Travis builds and checks on Ubuntu
========================================================

![alt text](images/travis-output.png)

WinBuilder builds and checks on Windows
========================================================
- Travis checks package on **Ubuntu**

- Winbuilder checks package on **Windows**

```{r,eval=FALSE}
  devtools::build_win()
```

- Builds and submits package to

- Simple, just sends an e-mail (example)

WinBuilder builds and checks on Windows
========================================================

<div align="center">
  <img src="images/winbuilder.png" width=800 height=500>
</div>

The final countdown
========================================================

Preliminaries:

1. `R CMD check` passes
2. Travis CI passes
3. Winbuilder passes

If all three of these are happening, you are ready to submit!

- Release notes (http://r-pkgs.had.co.nz/release.html#release-check)
- Aim, aim, Let it fly!

```{r, eval=FALSE}
  devtools::release()
```

Submits this form https://cran.r-project.org/submit.html

Conclusions
========================================================
&nbsp;

- It all comes down to **R CMD check**
<br><br>

- Know goals, prepare early for CRAN
<br><br>

- Travis, winbuilder are useful external tools
<br><br>

- Big victory for the devtools/R-packages book

Resources
========================================================
- http://r-pkgs.had.co.nz/check.html
- https://cran.r-project.org/doc/manuals/r-release/R-exts.html#useDynLib
- http://www.hep.by/gnu/r-patched/r-faq/R-FAQ_20.html
- https://cran.r-project.org/web/packages/policies.html

Two good lists of all the checks are
- http://r-pkgs.had.co.nz/check.html
- Section 1.3.1 of Writing R Extensions
